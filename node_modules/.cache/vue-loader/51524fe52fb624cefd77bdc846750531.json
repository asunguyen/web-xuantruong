{"remainingRequest":"D:\\code\\DU_AN\\web-xuantruong\\web\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\code\\DU_AN\\web-xuantruong\\web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\code\\DU_AN\\web-xuantruong\\web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\code\\DU_AN\\web-xuantruong\\web\\src\\views\\client\\NewsDetail.vue?vue&type=template&id=3b4ca73e&scoped=true","dependencies":[{"path":"D:\\code\\DU_AN\\web-xuantruong\\web\\src\\views\\client\\NewsDetail.vue","mtime":1700281250073},{"path":"D:\\code\\DU_AN\\web-xuantruong\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1700281618382},{"path":"D:\\code\\DU_AN\\web-xuantruong\\web\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1700281631273},{"path":"D:\\code\\DU_AN\\web-xuantruong\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1700281618382},{"path":"D:\\code\\DU_AN\\web-xuantruong\\web\\node_modules\\vue-loader\\lib\\index.js","mtime":1700281628177}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}